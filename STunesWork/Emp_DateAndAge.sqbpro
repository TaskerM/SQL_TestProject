<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/SQLite/Databases/sTunes.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3862"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="0" parent="2"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,8:maininvoices"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Sample View 1" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="68"/><column index="2" value="83"/><column index="3" value="129"/><column index="4" value="264"/><column index="5" value="132"/><column index="6" value="80"/><column index="7" value="96"/><column index="8" value="116"/><column index="9" value="40"/><column index="10" value="96"/><column index="11" value="71"/><column index="12" value="83"/><column index="13" value="294"/><column index="14" value="264"/><column index="15" value="132"/><column index="16" value="44"/><column index="17" value="96"/><column index="18" value="80"/><column index="19" value="128"/><column index="20" value="122"/><column index="21" value="183"/><column index="22" value="98"/><column index="23" value="82"/><column index="24" value="84"/><column index="25" value="84"/><column index="26" value="124"/><column index="27" value="75"/><column index="28" value="129"/><column index="29" value="129"/><column index="30" value="109"/><column index="31" value="50"/><column index="32" value="57"/><column index="33" value="73"/><column index="34" value="93"/><column index="35" value="115"/><column index="36" value="115"/><column index="37" value="168"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="0"/></sort><column_widths><column index="1" value="83"/><column index="2" value="71"/><column index="3" value="83"/><column index="4" value="294"/><column index="5" value="264"/><column index="6" value="132"/><column index="7" value="44"/><column index="8" value="96"/><column index="9" value="80"/><column index="10" value="128"/><column index="11" value="122"/><column index="12" value="183"/><column index="13" value="98"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="invoices" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="68"/><column index="2" value="83"/><column index="3" value="129"/><column index="4" value="264"/><column index="5" value="132"/><column index="6" value="80"/><column index="7" value="96"/><column index="8" value="116"/><column index="9" value="40"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/*
Created By: Mark Tasker
Created Date: 2/18/21
Description: Demonstrates DATE() function
*/
SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity AS 'Billing City',
	total
FROM
	invoices
WHERE
	DATE(InvoiceDate) &gt; '2010-01-02' AND Total &lt; 3
ORDER BY
	total;</sql><sql name="SQL 2">/*
Created By: Mark Tasker
Created Date: 2/18/21
Description: Uses OR to search name of cities
*/

SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM
	invoices
WHERE
	BillingCity LIKE 'p%' OR BillingCity LIKE 'd%'
ORDER BY
	Total;</sql><sql name="SQL 3">/*
Created By: Mark Tasker
Created Date: 2/18/21
Description: Uses parentheses to search city names /w a certain invoice VALUE
*/
SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM
	invoices
WHERE
	Total &gt; 3.00 AND (BillingCity LIKE 'P%' OR BillingCity LIKE 'd%')
ORDER BY
	Total;</sql><sql name="SQL 4">/*
Created By: Mark Tasker
Created Date: 2/18/21
Description: Uses CASE to classify new field PURCHASETYPE depending on customer expenditure
*/

SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total,
	CASE
		WHEN total &lt; 2.00 THEN 'Baseline Purchase'
		WHEN total BETWEEN 2.00 AND 6.99 THEN 'Low Purchase'
		WHEN total BETWEEN 7.00 AND 15.00 THEN 'Target Purchase'
		ELSE 'Top Performer'
		END AS PurchaseType
FROM
	invoices
WHERE
	PurchaseType = 'Top Performer'
ORDER BY
	BillingCity;</sql><sql name="SQL 5">/*
Created By: Mark Tasker
Created Date: 2/18/21
Description: Label all sales from USA as domestic sales field
*/
SELECT
	BillingCountry,
	BillingAddress,
	BillingCity,
	InvoiceDate,
	total,
	CASE
		WHEN BillingCountry = 'USA' THEN 'Domestic Sales'
		ELSE 'Foreign Sales'
		END AS SalesType
FROM
	invoices
WHERE
	total &gt; 15.00
ORDER BY
	SalesType;</sql><sql name="SQL 6">/*
Created by: Mark Tasker
Created Date: 2/18/21
Description: Inner join of customers and invoices
*/
SELECT
	*
FROM
	invoices
INNER JOIN
	customers
ON
	invoices.CustomerId = customers.CustomerId;</sql><sql name="SQL 7">/*
Created By: Mark Tasker
Created Date: 2/18/21
Description: Pull specific fields from invoices and customers 
*/
SELECT
	c.LastName,
	c.FirstName,
	i.InvoiceId,
	i.CustomerId,
	i.InvoiceDate,
	i.total
FROM
	invoices AS i
INNER JOIN
	customers AS c
ON
	i.CustomerId = c.CustomerId
ORDER BY
	c.LastName;</sql><sql name="SQL 8">/*
Created By: Mark Tasker
Created Date: 2/18/21
Description: Left Out Join example
*/
SELECT 
	i.InvoiceId,
	c.CustomerId,
	c.LastName,
	c.Address,
	i.InvoiceDate,
	i.BillingAddress,
	i.total
FROM
	invoices as i
LEFT OUTER JOIN
	customers AS c
ON
	i.CustomerId = c.CustomerId;</sql><sql name="SQL 9">/*
Created By: Mark Tasker
Created Date: 2/18/21
Description: join employees, customers, and invoices
*/
SELECT
	e.FirstName,
	e.LastName,
	e.EmployeeId,
	c.FirstName,
	C.LastName,
	c.SupportRepId,
	i.CustomerId,
	i.total
	
FROM
	invoices AS i
INNER JOIN
	customers AS c
ON
	i.customerId = c.CustomerId
INNER JOIN
	employees AS e
ON
	c.SupportRepId = e.EmployeeId
ORDER BY
	i.total DESC
LIMIT 10;
	</sql><sql name="SQL 10">/*
Author: Mark Tasker
Created Date: 2/19/21
Description: Concatenate first name last name, address, and postal code as mailing Address:1
*/

SELECT
	FirstName || ' ' || LastName || ' ' || Address || ' ' || ', ' || City || ', ' || State || ' ' || PostalCode AS [Mailing Address]
FROM
	customers
WHERE
	Country = 'USA';</sql><sql name="SQL 11">/*
Author: M T
Date: 2/19/21
Description: Show length of postal code and truncate postal code to 5 digits
*/

SELECT
	PostalCode,
	LENGTH(PostalCode) AS [Postal Code Length],
	SUBSTR(PostalCode, 1, 5) AS [5 Digit Postal Code],
	SUBSTR(PostalCode, 6)
FROM
	customers
WHERE
	Country = &quot;USA&quot;;</sql><sql name="SQL 12">/*
Author: Mark Tasker
Date: 2/18/21
Description: Show employees birth date and age
*/
SELECT
	FirstName || ' ' || LastName AS [Employee Name],
	STRFTIME('%Y-%m-%d', BirthDate) AS [Birthdate No Timecode],
	STRFTIME('%Y-%m-%d', 'NOW') - STRFTIME('%Y-%m-%d', BirthDate) AS [Age]
FROM
	employees
ORDER BY
	[Age] DESC;</sql><current_tab id="11"/></tab_sql></sqlb_project>
